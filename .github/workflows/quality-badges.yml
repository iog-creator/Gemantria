name: quality-badges
on:
  schedule:
    - cron: "37 7 * * *"
  workflow_dispatch: {}
permissions:
  contents: write    # used only when ALLOW_BADGE_COMMITS=true on first-party runs
  actions: read
jobs:
  badges:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - uses: actions/setup-python@v5
        with: { python-version: "3.11" }

      - name: Download latest history artifacts
        uses: actions/download-artifact@v4
        with:
          path: _artifacts
      - name: Prepare histories
        run: |
          set -e
          mkdir -p share/eval/badges
          # Grab most recent line from each JSONL if present
          tail -n 1 _artifacts/mypy_history/mypy_history.jsonl 2>/dev/null > _mypy.jsonl || true
          tail -n 1 _artifacts/ruff_history/ruff_history.jsonl 2>/dev/null > _ruff.jsonl || true
          tail -n 1 _artifacts/coverage_history/coverage_history.jsonl 2>/dev/null > _cov.jsonl || true
          tail -n 1 _artifacts/graph_history/graph_anomalies.jsonl 2>/dev/null > _graph.jsonl || true

      - name: Extract values
        id: vals
        run: |
          set -e
          mypy_errors=$(python3 -c "import json,os; p='_mypy.jsonl'; print(json.loads(open(p).read())['errors'] if os.path.exists(p) and os.path.getsize(p)>0 else 0)" 2>/dev/null || echo "0")
          ruff_count=$(python3 -c "import json,os; p='_ruff.jsonl'; print(json.loads(open(p).read())['count'] if os.path.exists(p) and os.path.getsize(p)>0 else 0)" 2>/dev/null || echo "0")
          cov_pct=$(python3 -c "import json,os; p='_cov.jsonl'; print(json.loads(open(p).read())['percent'] if os.path.exists(p) and os.path.getsize(p)>0 else 0.0)" 2>/dev/null || echo "0.0")
          echo "mypy=${mypy_errors}" >> "$GITHUB_OUTPUT"
          echo "ruff=${ruff_count}" >> "$GITHUB_OUTPUT"
          printf "cover=%.2f\n" "$cov_pct" >> "$GITHUB_OUTPUT"
          graph_badge=$(python - <<'PY'
          import json,os,sys
          p="_graph.jsonl"
          if not os.path.exists(p) or os.path.getsize(p)==0:
              print("isolates:0,dangling:0,cycles:0"); sys.exit(0)
          o=json.loads(open(p).read())
          print(f"isolates:{o.get('isolates',0)},dangling:{o.get('dangling',0)},cycles:{o.get('cycles',0)}")
          PY
          )
          echo "graph=${graph_badge}" >> "$GITHUB_OUTPUT"

      - name: Generate SVG badges
        run: |
          python scripts/eval/gen_badge.py "MyPy Errors"  "${{ steps.vals.outputs.mypy }}"  "#007ec6" > share/eval/badges/mypy.svg
          python scripts/eval/gen_badge.py "Ruff Issues"  "${{ steps.vals.outputs.ruff }}"  "#5c53ff" > share/eval/badges/ruff.svg
          python scripts/eval/gen_badge.py "Coverage %"   "${{ steps.vals.outputs.cover }}" "#4c1"    > share/eval/badges/coverage.svg
          python scripts/eval/gen_badge.py "Graph Anoms" "${{ steps.vals.outputs.graph }}" "#d97706" > share/eval/badges/graph.svg

      - name: Upload badges as artifact
        uses: actions/upload-artifact@v4
        with:
          name: quality_badges
          path: share/eval/badges/*.svg

      - name: Conditionally commit refreshed badges to repo
        if: ${{ vars.ALLOW_BADGE_COMMITS == 'true' && (github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')) }}
        run: |
          set -e
          git config user.name  "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add share/eval/badges/*.svg
          if git diff --cached --quiet; then
            echo "No badge changes to commit."
          else
            git commit -m "ci(059): refresh quality metric badges"
            git push
          fi
