#!/usr/bin/env python3
"""
generate_forest.py â€” rebuilds high-level project map

Scans ADRs, .cursor/rules, and CI workflows to produce:
- docs/forest/overview.md
- docs/VERIFICATION_MATRIX.md
- summary to stdout

Rule Reference: 025-phase-gate.mdc
"""

import os, yaml, json, re
from pathlib import Path

ROOT = Path(__file__).resolve().parent.parent
DOCS = ROOT / "docs"
FOREST = DOCS / "forest"
RULES = ROOT / ".cursor" / "rules"
CI = ROOT / ".github" / "workflows"

def list_files(path, ext):
    return sorted(p for p in path.glob(f"**/*{ext}") if p.is_file())

def parse_rule(file):
    text = file.read_text()
    title = re.search(r"# (Rule .+)", text)
    return title.group(1) if title else file.name

def main():
    FOREST.mkdir(parents=True, exist_ok=True)
    rules = [parse_rule(f) for f in RULES.glob("*.mdc")]
    workflows = [f.name for f in CI.glob("*.yml")]
    adrs = [f.name for f in (DOCS / "ADRs").glob("ADR-*.md")]

    ov = [
        "# ðŸŒ² Gemantria Project Forest Overview",
        "Auto-generated by `scripts/generate_forest.py`.\n",
        "## Rules",
        *[f"- {r}" for r in rules],
        "\n## CI Workflows",
        *[f"- {w}" for w in workflows],
        "\n## ADRs",
        *[f"- {a}" for a in adrs],
        "\n## Last Sync",
        f"- {os.popen('date -u').read().strip()}",
    ]
    (FOREST / "overview.md").write_text("\n".join(ov))

    # Verification Matrix skeleton
    matrix = [
        "| Rule | Verified Script | CI Workflow | Evidence Artifact |",
        "|------|-----------------|--------------|-------------------|",
    ]
    for rule in rules:
        tag = re.search(r"Rule (\\d+)", rule)
        num = tag.group(1) if tag else "?"
        script = next((str(p) for p in ROOT.glob(f"**/*{num}*.py")), "â€”")
        wf = next((w for w in workflows if num in w), "â€”")
        matrix.append(f"| {num} | {Path(script).name} | {wf} | _TBD_ |")

    (DOCS / "VERIFICATION_MATRIX.md").write_text("\n".join(matrix))
    print("[generate_forest] overview + verification matrix rebuilt.")

if __name__ == "__main__":
    main()
